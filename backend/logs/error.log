2025-09-15 20:01:20 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42601`. Message: `ERROR: syntax error at or near "WHERE"` | MESSAGE: {"code":"P2010","meta":{"code":"42601","message":"ERROR: syntax error at or near \"WHERE\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:01:25 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42601`. Message: `ERROR: syntax error at or near "WHERE"` | MESSAGE: {"code":"P2010","meta":{"code":"42601","message":"ERROR: syntax error at or near \"WHERE\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:01:50 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42601`. Message: `ERROR: syntax error at or near "WHERE"` | MESSAGE: {"code":"P2010","meta":{"code":"42601","message":"ERROR: syntax error at or near \"WHERE\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:01:52 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42601`. Message: `ERROR: syntax error at or near "WHERE"` | MESSAGE: {"code":"P2010","meta":{"code":"42601","message":"ERROR: syntax error at or near \"WHERE\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:01:56 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42601`. Message: `ERROR: syntax error at or near "WHERE"` | MESSAGE: {"code":"P2010","meta":{"code":"42601","message":"ERROR: syntax error at or near \"WHERE\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:02:01 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42601`. Message: `ERROR: syntax error at or near "WHERE"` | MESSAGE: {"code":"P2010","meta":{"code":"42601","message":"ERROR: syntax error at or near \"WHERE\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:02:53 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42601`. Message: `ERROR: syntax error at or near "WHERE"` | MESSAGE: {"code":"P2010","meta":{"code":"42601","message":"ERROR: syntax error at or near \"WHERE\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:08:14 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42883`. Message: `ERROR: operator does not exist: "PropertyCategory" = text
HINT: No operator matches the given name and argument types. You might need to add explicit type casts.` | MESSAGE: {"code":"P2010","meta":{"code":"42883","message":"ERROR: operator does not exist: \"PropertyCategory\" = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts."},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:08:16 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42883`. Message: `ERROR: operator does not exist: "PropertyCategory" = text
HINT: No operator matches the given name and argument types. You might need to add explicit type casts.` | MESSAGE: {"code":"P2010","meta":{"code":"42883","message":"ERROR: operator does not exist: \"PropertyCategory\" = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts."},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:08:16 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42883`. Message: `ERROR: operator does not exist: "PropertyCategory" = text
HINT: No operator matches the given name and argument types. You might need to add explicit type casts.` | MESSAGE: {"code":"P2010","meta":{"code":"42883","message":"ERROR: operator does not exist: \"PropertyCategory\" = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts."},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:08:19 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42883`. Message: `ERROR: operator does not exist: "PropertyCategory" = text
HINT: No operator matches the given name and argument types. You might need to add explicit type casts.` | MESSAGE: {"code":"P2010","meta":{"code":"42883","message":"ERROR: operator does not exist: \"PropertyCategory\" = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts."},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:08:24 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42883`. Message: `ERROR: operator does not exist: "PropertyCategory" = text
HINT: No operator matches the given name and argument types. You might need to add explicit type casts.` | MESSAGE: {"code":"P2010","meta":{"code":"42883","message":"ERROR: operator does not exist: \"PropertyCategory\" = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts."},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-15 20:08:48 [ERROR]: GET /property/nearby | STATUS: 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42883`. Message: `ERROR: operator does not exist: "PropertyCategory" = text
HINT: No operator matches the given name and argument types. You might need to add explicit type casts.` | MESSAGE: {"code":"P2010","meta":{"code":"42883","message":"ERROR: operator does not exist: \"PropertyCategory\" = text\nHINT: No operator matches the given name and argument types. You might need to add explicit type casts."},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 13:14:37 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:19:12 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:22:45 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:22:55 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:27:18 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:30:32 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:31:07 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:34:32 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:39:22 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:51:13 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:57:09 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:57:20 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:57:45 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 13:57:51 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:05:36 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:06:09 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:12:28 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:19:54 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:20:54 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:21:42 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:30:59 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:31:21 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:32:38 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:34:10 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:34:26 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:39:59 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:40:21 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:46:27 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:47:20 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:53:14 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:57:48 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:02:11 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:02:20 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:05:42 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:05:44 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:05:49 [ERROR]: GET /room/search | STATUS: 
Invalid `prisma.rooms.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:170:29

  167   checkIn?: string,
  168   checkOut?: string
  169 ) => {
→ 170   return await prisma.rooms.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"rooms","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:05:55 [ERROR]: GET /room/search | STATUS: 
Invalid `prisma.rooms.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:170:29

  167   checkIn?: string,
  168   checkOut?: string
  169 ) => {
→ 170   return await prisma.rooms.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"rooms","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:06:59 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:11:40 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:11:47 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:11:52 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:11:55 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:12:24 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:19:32 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:19:37 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:19:43 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:19:50 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:19:53 [ERROR]: GET /user/me | STATUS: 
Invalid `prisma.users.findUnique()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\user\user.respository.ts:7:23

  4 import AppError from "../../errors/AppError";
  5 
  6 export const findUserById = async (userId: string) => {
→ 7   return prisma.users.findUnique(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"users","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:20:01 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:20:12 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:20:14 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:20:17 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:20:23 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:20:30 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 15:21:38 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-09-16 15:21:44 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-09-16 15:21:59 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-09-16 15:23:00 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:23:04 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:26:36 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:26:49 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:29:14 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:29:24 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:31:12 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:32:16 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:32:27 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:34:05 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:34:18 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:39:41 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:41:44 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:41:55 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:43:33 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:44:01 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:45:33 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:47:50 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:54:13 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:56:08 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:56:27 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:57:58 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:58:12 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:59:42 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:59:57 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:03:53 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:04:12 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:06:56 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:07:47 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:09:31 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:09:41 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:10:58 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:11:12 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:22:52 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:23:18 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:23:30 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:25:21 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:35:10 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 16:44:16 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 16:44:30 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 17:06:41 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 17:06:42 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 17:06:44 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 17:06:49 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 17:06:55 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 17:06:59 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 17:07:02 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 17:08:45 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-09-16 17:08:45 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 17:08:50 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-09-16 17:08:56 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:16:28

  13 }) => {
  14   const { property_category, name } = filters;
  15 
→ 16   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`


2025-09-11 11:08:58 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-11 11:10:06 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-12 10:06:41 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-12 10:25:16 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-12 11:38:48 [ERROR]: GET /property/eaf4b11b-8dfe-492f-a422-76ca555d9ccd/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:38:50 [ERROR]: GET /property/eaf4b11b-8dfe-492f-a422-76ca555d9ccd/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:38:53 [ERROR]: GET /property/eaf4b11b-8dfe-492f-a422-76ca555d9ccd/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:38:57 [ERROR]: GET /property/eaf4b11b-8dfe-492f-a422-76ca555d9ccd/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:39:17 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:39:18 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:39:20 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:39:24 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:03 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-12 11:41:15 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:16 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:18 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:22 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:50 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:52 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:54 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:57 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-12 11:42:02 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:03 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:06 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:10 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:15 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:17 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:19 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:23 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:44:45 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:44:46 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:44:48 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:44:52 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:51:35 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:51:37 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:51:40 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:51:44 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:51:50 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:52:52 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:52:53 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:52:55 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:52:59 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:54:20 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-14 03:47:14 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-14 04:48:01 [ERROR]: POST /reservations/create | STATUS: Please enter the required fields | MESSAGE: {"statusCode":400,"success":false,"message":"Please enter the required fields"}
2025-09-14 04:48:09 [ERROR]: POST /reservations/create | STATUS: Please enter the required fields | MESSAGE: {"statusCode":400,"success":false,"message":"Please enter the required fields"}
2025-09-14 04:54:48 [ERROR]: PATCH /reservations/proof/8ba2b3a0-140f-44a3-8195-f32e71f5cd89 | STATUS: Unexpected field | MESSAGE: {"name":"MulterError","message":"Unexpected field","code":"LIMIT_UNEXPECTED_FILE","field":"proofImage","storageErrors":[]}
2025-09-14 04:54:56 [ERROR]: PATCH /reservations/proof/8ba2b3a0-140f-44a3-8195-f32e71f5cd89 | STATUS: Unexpected field | MESSAGE: {"name":"MulterError","message":"Unexpected field","code":"LIMIT_UNEXPECTED_FILE","field":"proofImage","storageErrors":[]}
2025-09-14 05:19:36 [ERROR]: PATCH /reservations/proof/e69640c3-0fee-4963-a989-2e83d9a8d843 | STATUS: Unexpected field | MESSAGE: {"name":"MulterError","message":"Unexpected field","code":"LIMIT_UNEXPECTED_FILE","field":"proofImage","storageErrors":[]}
2025-09-14 05:25:20 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:25:40 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:25:59 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:26:05 [ERROR]: PATCH /reservations/cancel/e69640c3-0fee-4963-a989-2e83d9a8d843 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:26:31 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:27:06 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:27:40 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:28:13 [ERROR]: PATCH /reservations/cancel/fe7b64c7-6b3c-45d9-a2e9-0ca0179247c3 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:30:02 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:30:59 [ERROR]: PATCH /reservations/cancel/c18491d0-c085-489f-abaf-3c9d8e2a0ecb | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-15 10:55:06 [ERROR]: GET /reservations/get | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-15 10:55:07 [ERROR]: GET /reservations/get | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-15 10:55:09 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-15 10:55:21 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 00:08:30 [ERROR]: POST /auth/login | STATUS: Invalid password | MESSAGE: {"statusCode":401,"success":false,"message":"Invalid password"}
2025-09-16 00:57:40 [ERROR]: GET /payment/availability | STATUS: 
Invalid `prisma.tenants.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/tenant/tenant-tx.controller.ts:340:49

  337   );
  338 }
  339 
→ 340 const tenantRecord = await prisma.tenants.findUnique({
        where: {
          user_id: undefined,
      ?   id?: String,
      ?   AND?: tenantsWhereInput | tenantsWhereInput[],
      ?   OR?: tenantsWhereInput[],
      ?   NOT?: tenantsWhereInput | tenantsWhereInput[],
      ?   company_name?: StringFilter | String,
      ?   address?: StringFilter | String,
      ?   phone_number?: StringFilter | String,
      ?   logo?: StringNullableFilter | String | Null,
      ?   created_at?: DateTimeFilter | DateTime,
      ?   updated_at?: DateTimeFilter | DateTime,
      ?   properties?: PropertiesListRelationFilter,
      ?   user?: UsersScalarRelationFilter | usersWhereInput
        },
        select: {
          id: true
        }
      })

Argument `where` of type tenantsWhereUniqueInput needs at least one of `id` or `user_id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-16 00:57:57 [ERROR]: GET /payment/availability | STATUS: 
Invalid `prisma.tenants.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/tenant/tenant-tx.controller.ts:340:49

  337   );
  338 }
  339 
→ 340 const tenantRecord = await prisma.tenants.findUnique({
        where: {
          user_id: undefined,
      ?   id?: String,
      ?   AND?: tenantsWhereInput | tenantsWhereInput[],
      ?   OR?: tenantsWhereInput[],
      ?   NOT?: tenantsWhereInput | tenantsWhereInput[],
      ?   company_name?: StringFilter | String,
      ?   address?: StringFilter | String,
      ?   phone_number?: StringFilter | String,
      ?   logo?: StringNullableFilter | String | Null,
      ?   created_at?: DateTimeFilter | DateTime,
      ?   updated_at?: DateTimeFilter | DateTime,
      ?   properties?: PropertiesListRelationFilter,
      ?   user?: UsersScalarRelationFilter | usersWhereInput
        },
        select: {
          id: true
        }
      })

Argument `where` of type tenantsWhereUniqueInput needs at least one of `id` or `user_id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-16 00:57:57 [ERROR]: GET /payment/availability | STATUS: 
Invalid `prisma.tenants.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/tenant/tenant-tx.controller.ts:340:49

  337   );
  338 }
  339 
→ 340 const tenantRecord = await prisma.tenants.findUnique({
        where: {
          user_id: undefined,
      ?   id?: String,
      ?   AND?: tenantsWhereInput | tenantsWhereInput[],
      ?   OR?: tenantsWhereInput[],
      ?   NOT?: tenantsWhereInput | tenantsWhereInput[],
      ?   company_name?: StringFilter | String,
      ?   address?: StringFilter | String,
      ?   phone_number?: StringFilter | String,
      ?   logo?: StringNullableFilter | String | Null,
      ?   created_at?: DateTimeFilter | DateTime,
      ?   updated_at?: DateTimeFilter | DateTime,
      ?   properties?: PropertiesListRelationFilter,
      ?   user?: UsersScalarRelationFilter | usersWhereInput
        },
        select: {
          id: true
        }
      })

Argument `where` of type tenantsWhereUniqueInput needs at least one of `id` or `user_id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-16 00:58:36 [ERROR]: GET /payment/availability | STATUS: 
Invalid `prisma.tenants.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/tenant/tenant-tx.controller.ts:340:49

  337   );
  338 }
  339 
→ 340 const tenantRecord = await prisma.tenants.findUnique({
        where: {
          user_id: undefined,
      ?   id?: String,
      ?   AND?: tenantsWhereInput | tenantsWhereInput[],
      ?   OR?: tenantsWhereInput[],
      ?   NOT?: tenantsWhereInput | tenantsWhereInput[],
      ?   company_name?: StringFilter | String,
      ?   address?: StringFilter | String,
      ?   phone_number?: StringFilter | String,
      ?   logo?: StringNullableFilter | String | Null,
      ?   created_at?: DateTimeFilter | DateTime,
      ?   updated_at?: DateTimeFilter | DateTime,
      ?   properties?: PropertiesListRelationFilter,
      ?   user?: UsersScalarRelationFilter | usersWhereInput
        },
        select: {
          id: true
        }
      })

Argument `where` of type tenantsWhereUniqueInput needs at least one of `id` or `user_id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-16 00:58:37 [ERROR]: GET /payment/availability | STATUS: 
Invalid `prisma.tenants.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/tenant/tenant-tx.controller.ts:340:49

  337   );
  338 }
  339 
→ 340 const tenantRecord = await prisma.tenants.findUnique({
        where: {
          user_id: undefined,
      ?   id?: String,
      ?   AND?: tenantsWhereInput | tenantsWhereInput[],
      ?   OR?: tenantsWhereInput[],
      ?   NOT?: tenantsWhereInput | tenantsWhereInput[],
      ?   company_name?: StringFilter | String,
      ?   address?: StringFilter | String,
      ?   phone_number?: StringFilter | String,
      ?   logo?: StringNullableFilter | String | Null,
      ?   created_at?: DateTimeFilter | DateTime,
      ?   updated_at?: DateTimeFilter | DateTime,
      ?   properties?: PropertiesListRelationFilter,
      ?   user?: UsersScalarRelationFilter | usersWhereInput
        },
        select: {
          id: true
        }
      })

Argument `where` of type tenantsWhereUniqueInput needs at least one of `id` or `user_id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-16 14:31:48 [ERROR]: POST /auth/logout | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:31:50 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:56:14 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-09-16 17:09:58 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 17:10:28 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 17:12:23 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 17:12:51 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 18:33:24 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}

2025-09-11 11:08:58 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-11 11:10:06 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-12 10:06:41 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-12 10:25:16 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-12 11:38:48 [ERROR]: GET /property/eaf4b11b-8dfe-492f-a422-76ca555d9ccd/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:38:50 [ERROR]: GET /property/eaf4b11b-8dfe-492f-a422-76ca555d9ccd/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:38:53 [ERROR]: GET /property/eaf4b11b-8dfe-492f-a422-76ca555d9ccd/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:38:57 [ERROR]: GET /property/eaf4b11b-8dfe-492f-a422-76ca555d9ccd/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:39:17 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:39:18 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:39:20 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:39:24 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:03 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-12 11:41:15 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:16 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:18 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:22 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:50 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:52 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:54 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:41:57 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-12 11:42:02 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:03 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:06 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:10 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:15 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:17 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:19 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:42:23 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:44:45 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:44:46 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:44:48 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:44:52 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:51:35 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:51:37 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:51:40 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:51:44 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:51:50 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:52:52 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:52:53 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:52:55 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:52:59 [ERROR]: GET /property/30b7c57f-fe6f-4c5c-9936-94c689517762/reviews | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/reviews/review.controller.ts:74:27

  71 );
  72 
  73 const [propertyData, totalReviews] = await Promise.all([
→ 74   prisma.properties.findUnique({
         where: {
           id: undefined,
       ?   AND?: propertiesWhereInput | propertiesWhereInput[],
       ?   OR?: propertiesWhereInput[],
       ?   NOT?: propertiesWhereInput | propertiesWhereInput[],
       ?   tenant_id?: StringFilter | String,
       ?   name?: StringFilter | String,
       ?   description?: StringNullableFilter | String | Null,
       ?   address?: StringFilter | String,
       ?   city?: StringFilter | String,
       ?   province?: StringFilter | String,
       ?   zip_code?: StringFilter | String,
       ?   latitude?: DecimalFilter | Decimal,
       ?   longitude?: DecimalFilter | Decimal,
       ?   main_image?: StringNullableFilter | String | Null,
       ?   created_at?: DateTimeFilter | DateTime,
       ?   updated_at?: DateTimeFilter | DateTime,
       ?   deleted_at?: DateTimeNullableFilter | DateTime | Null,
       ?   property_category?: EnumPropertyCategoryFilter | PropertyCategory,
       ?   bookings?: BookingsListRelationFilter,
       ?   peak_season_rates?: Peak_season_ratesListRelationFilter,
       ?   tenant?: TenantsScalarRelationFilter | tenantsWhereInput,
       ?   property_images?: Property_imagesListRelationFilter,
       ?   reviews?: ReviewsListRelationFilter,
       ?   rooms?: RoomsListRelationFilter
         },
         include: {
           reviews: {
             take: 3,
             skip: 0,
             orderBy: {
               created_at: "desc"
             },
             include: {
               user: {
                 select: {
                   full_name: true,
                   profile_picture: true
                 }
               }
             }
           }
         }
       })

Argument `where` of type propertiesWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-12 11:54:20 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-14 03:47:14 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-14 04:48:01 [ERROR]: POST /reservations/create | STATUS: Please enter the required fields | MESSAGE: {"statusCode":400,"success":false,"message":"Please enter the required fields"}
2025-09-14 04:48:09 [ERROR]: POST /reservations/create | STATUS: Please enter the required fields | MESSAGE: {"statusCode":400,"success":false,"message":"Please enter the required fields"}
2025-09-14 04:54:48 [ERROR]: PATCH /reservations/proof/8ba2b3a0-140f-44a3-8195-f32e71f5cd89 | STATUS: Unexpected field | MESSAGE: {"name":"MulterError","message":"Unexpected field","code":"LIMIT_UNEXPECTED_FILE","field":"proofImage","storageErrors":[]}
2025-09-14 04:54:56 [ERROR]: PATCH /reservations/proof/8ba2b3a0-140f-44a3-8195-f32e71f5cd89 | STATUS: Unexpected field | MESSAGE: {"name":"MulterError","message":"Unexpected field","code":"LIMIT_UNEXPECTED_FILE","field":"proofImage","storageErrors":[]}
2025-09-14 05:19:36 [ERROR]: PATCH /reservations/proof/e69640c3-0fee-4963-a989-2e83d9a8d843 | STATUS: Unexpected field | MESSAGE: {"name":"MulterError","message":"Unexpected field","code":"LIMIT_UNEXPECTED_FILE","field":"proofImage","storageErrors":[]}
2025-09-14 05:25:20 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:25:40 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:25:59 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:26:05 [ERROR]: PATCH /reservations/cancel/e69640c3-0fee-4963-a989-2e83d9a8d843 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:26:31 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:27:06 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:27:40 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:28:13 [ERROR]: PATCH /reservations/cancel/fe7b64c7-6b3c-45d9-a2e9-0ca0179247c3 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:30:02 [ERROR]: PATCH /reservations/cancel/1e9c9b28-b8c3-4692-966d-ca07eec39cc9 | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-14 05:30:59 [ERROR]: PATCH /reservations/cancel/c18491d0-c085-489f-abaf-3c9d8e2a0ecb | STATUS: Invalid transaction ID | MESSAGE: {"statusCode":400,"success":false,"message":"Invalid transaction ID"}
2025-09-15 10:55:06 [ERROR]: GET /reservations/get | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-15 10:55:07 [ERROR]: GET /reservations/get | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-15 10:55:09 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-15 10:55:21 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 00:08:30 [ERROR]: POST /auth/login | STATUS: Invalid password | MESSAGE: {"statusCode":401,"success":false,"message":"Invalid password"}
2025-09-16 00:57:40 [ERROR]: GET /payment/availability | STATUS: 
Invalid `prisma.tenants.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/tenant/tenant-tx.controller.ts:340:49

  337   );
  338 }
  339 
→ 340 const tenantRecord = await prisma.tenants.findUnique({
        where: {
          user_id: undefined,
      ?   id?: String,
      ?   AND?: tenantsWhereInput | tenantsWhereInput[],
      ?   OR?: tenantsWhereInput[],
      ?   NOT?: tenantsWhereInput | tenantsWhereInput[],
      ?   company_name?: StringFilter | String,
      ?   address?: StringFilter | String,
      ?   phone_number?: StringFilter | String,
      ?   logo?: StringNullableFilter | String | Null,
      ?   created_at?: DateTimeFilter | DateTime,
      ?   updated_at?: DateTimeFilter | DateTime,
      ?   properties?: PropertiesListRelationFilter,
      ?   user?: UsersScalarRelationFilter | usersWhereInput
        },
        select: {
          id: true
        }
      })

Argument `where` of type tenantsWhereUniqueInput needs at least one of `id` or `user_id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-16 00:57:57 [ERROR]: GET /payment/availability | STATUS: 
Invalid `prisma.tenants.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/tenant/tenant-tx.controller.ts:340:49

  337   );
  338 }
  339 
→ 340 const tenantRecord = await prisma.tenants.findUnique({
        where: {
          user_id: undefined,
      ?   id?: String,
      ?   AND?: tenantsWhereInput | tenantsWhereInput[],
      ?   OR?: tenantsWhereInput[],
      ?   NOT?: tenantsWhereInput | tenantsWhereInput[],
      ?   company_name?: StringFilter | String,
      ?   address?: StringFilter | String,
      ?   phone_number?: StringFilter | String,
      ?   logo?: StringNullableFilter | String | Null,
      ?   created_at?: DateTimeFilter | DateTime,
      ?   updated_at?: DateTimeFilter | DateTime,
      ?   properties?: PropertiesListRelationFilter,
      ?   user?: UsersScalarRelationFilter | usersWhereInput
        },
        select: {
          id: true
        }
      })

Argument `where` of type tenantsWhereUniqueInput needs at least one of `id` or `user_id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-16 00:57:57 [ERROR]: GET /payment/availability | STATUS: 
Invalid `prisma.tenants.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/tenant/tenant-tx.controller.ts:340:49

  337   );
  338 }
  339 
→ 340 const tenantRecord = await prisma.tenants.findUnique({
        where: {
          user_id: undefined,
      ?   id?: String,
      ?   AND?: tenantsWhereInput | tenantsWhereInput[],
      ?   OR?: tenantsWhereInput[],
      ?   NOT?: tenantsWhereInput | tenantsWhereInput[],
      ?   company_name?: StringFilter | String,
      ?   address?: StringFilter | String,
      ?   phone_number?: StringFilter | String,
      ?   logo?: StringNullableFilter | String | Null,
      ?   created_at?: DateTimeFilter | DateTime,
      ?   updated_at?: DateTimeFilter | DateTime,
      ?   properties?: PropertiesListRelationFilter,
      ?   user?: UsersScalarRelationFilter | usersWhereInput
        },
        select: {
          id: true
        }
      })

Argument `where` of type tenantsWhereUniqueInput needs at least one of `id` or `user_id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-16 00:58:36 [ERROR]: GET /payment/availability | STATUS: 
Invalid `prisma.tenants.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/tenant/tenant-tx.controller.ts:340:49

  337   );
  338 }
  339 
→ 340 const tenantRecord = await prisma.tenants.findUnique({
        where: {
          user_id: undefined,
      ?   id?: String,
      ?   AND?: tenantsWhereInput | tenantsWhereInput[],
      ?   OR?: tenantsWhereInput[],
      ?   NOT?: tenantsWhereInput | tenantsWhereInput[],
      ?   company_name?: StringFilter | String,
      ?   address?: StringFilter | String,
      ?   phone_number?: StringFilter | String,
      ?   logo?: StringNullableFilter | String | Null,
      ?   created_at?: DateTimeFilter | DateTime,
      ?   updated_at?: DateTimeFilter | DateTime,
      ?   properties?: PropertiesListRelationFilter,
      ?   user?: UsersScalarRelationFilter | usersWhereInput
        },
        select: {
          id: true
        }
      })

Argument `where` of type tenantsWhereUniqueInput needs at least one of `id` or `user_id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-16 00:58:37 [ERROR]: GET /payment/availability | STATUS: 
Invalid `prisma.tenants.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/tenant/tenant-tx.controller.ts:340:49

  337   );
  338 }
  339 
→ 340 const tenantRecord = await prisma.tenants.findUnique({
        where: {
          user_id: undefined,
      ?   id?: String,
      ?   AND?: tenantsWhereInput | tenantsWhereInput[],
      ?   OR?: tenantsWhereInput[],
      ?   NOT?: tenantsWhereInput | tenantsWhereInput[],
      ?   company_name?: StringFilter | String,
      ?   address?: StringFilter | String,
      ?   phone_number?: StringFilter | String,
      ?   logo?: StringNullableFilter | String | Null,
      ?   created_at?: DateTimeFilter | DateTime,
      ?   updated_at?: DateTimeFilter | DateTime,
      ?   properties?: PropertiesListRelationFilter,
      ?   user?: UsersScalarRelationFilter | usersWhereInput
        },
        select: {
          id: true
        }
      })

Argument `where` of type tenantsWhereUniqueInput needs at least one of `id` or `user_id` arguments. Available options are marked with ?. | MESSAGE: {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-16 14:31:48 [ERROR]: POST /auth/logout | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:31:50 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 14:56:14 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 15:10:47 [ERROR]: GET /property/tenant | STATUS: 
Invalid `prisma.tenants.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/property/property.repository.ts:50:25

  47 }
  48 
  49 export const getTenantWithPropertiesByUserId = async (userId: string) => {
→ 50   return prisma.tenants.findUnique(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. | MESSAGE: {"code":"P1001","meta":{"modelName":"tenants","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-16 18:40:03 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-16 18:43:28 [ERROR]: PATCH /reservations/proof/3c06d13c-a19b-4343-b179-96495017a1d1 | STATUS: Unexpected field | MESSAGE: {"name":"MulterError","message":"Unexpected field","code":"LIMIT_UNEXPECTED_FILE","field":"proofImage","storageErrors":[]}
