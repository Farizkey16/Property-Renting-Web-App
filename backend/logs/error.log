2025-08-26 14:12:44 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 14:12:49 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-08-26 14:13:57 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 14:16:30 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 14:17:43 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 14:17:53 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 13) {"code":"P2024","meta":{"modelName":"properties","connection_limit":13,"timeout":10},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-26 14:18:47 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 17:29:06 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 17:37:16 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 17:52:28 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 17:53:20 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 17:53:58 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-26 17:55:16 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 17:56:28 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 19:38:20 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-26 19:38:30 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-26 19:47:33 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 19:48:58 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 19:50:29 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-26 19:58:10 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Server has closed the connection. {"code":"P1017","meta":{"modelName":"properties"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-26 21:48:24 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-26 21:48:31 [ERROR]: GET /user/me 
Invalid `prisma.users.findUnique()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\user\user.respository.ts:7:23

  4 import AppError from "../../errors/AppError";
  5 
  6 export const findUserById = async (userId: string) => {
→ 7   return prisma.users.findUnique(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"users","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-26 21:48:31 [ERROR]: GET /room/search 
Invalid `prisma.rooms.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:29:29

  26   propertyname: string,
  27   roomname: string
  28 ) => {
→ 29   return await prisma.rooms.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"rooms","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-26 21:48:37 [ERROR]: GET /room/search 
Invalid `prisma.rooms.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:29:29

  26   propertyname: string,
  27   roomname: string
  28 ) => {
→ 29   return await prisma.rooms.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"rooms","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-26 21:48:45 [ERROR]: GET /room/search 
Invalid `prisma.rooms.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:29:29

  26   propertyname: string,
  27   roomname: string
  28 ) => {
→ 29   return await prisma.rooms.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"rooms","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-26 22:41:01 [ERROR]: POST /room/create/a8da1ec9-239f-45a5-a58d-be76da2fc308 Unexpected field {"name":"MulterError","message":"Unexpected field","code":"LIMIT_UNEXPECTED_FILE","field":"images","storageErrors":[]}
2025-08-27 18:50:27 [ERROR]: GET /user/me User not found {"statusCode":404,"success":false,"message":"User not found"}
2025-08-27 18:51:09 [ERROR]: GET /user/me User not found {"statusCode":404,"success":false,"message":"User not found"}
2025-08-27 18:51:13 [ERROR]: GET /user/me User not found {"statusCode":404,"success":false,"message":"User not found"}
2025-08-27 19:54:18 [ERROR]: POST /property/create Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:25:44 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:26:34 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:27:19 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:30:28 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:32:37 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:34:32 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:35:06 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-08-27 20:36:58 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:37:20 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:38:31 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:42:08 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:44:03 [ERROR]: GET /property/tenant Unauthorized access {"statusCode":401,"success":false,"message":"Unauthorized access"}
2025-08-27 20:44:12 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:44:29 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:44:40 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:45:37 [ERROR]: GET /property/ Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:49:29 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:49:42 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:52:10 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:53:52 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 20:54:58 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-27 21:39:01 [ERROR]: DELETE /room/delete/b80ceab2-a895-437f-8f59-4ea7f91c7fef 
Invalid `prisma.rooms.delete()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:80:35

  77 };
  78 
  79 export const deleteRoomByIdRepository = async (id: string) => {
→ 80   return await prisma.rooms.delete(
Foreign key constraint violated on the constraint: `room_images_room_id_fkey` {"code":"P2003","meta":{"modelName":"rooms","constraint":"room_images_room_id_fkey"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-27 21:40:19 [ERROR]: DELETE /room/delete/b80ceab2-a895-437f-8f59-4ea7f91c7fef 
Invalid `prisma.rooms.delete()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:80:35

  77 };
  78 
  79 export const deleteRoomByIdRepository = async (id: string) => {
→ 80   return await prisma.rooms.delete(
Foreign key constraint violated on the constraint: `room_images_room_id_fkey` {"code":"P2003","meta":{"modelName":"rooms","constraint":"room_images_room_id_fkey"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-27 21:40:55 [ERROR]: DELETE /room/delete/b80ceab2-a895-437f-8f59-4ea7f91c7fef 
Invalid `prisma.rooms.delete()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:80:35

  77 };
  78 
  79 export const deleteRoomByIdRepository = async (id: string) => {
→ 80   return await prisma.rooms.delete(
Foreign key constraint violated on the constraint: `room_images_room_id_fkey` {"code":"P2003","meta":{"modelName":"rooms","constraint":"room_images_room_id_fkey"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-28 19:50:06 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-08-28 19:50:06 [ERROR]: GET /user/me 
Invalid `prisma.users.findUnique()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\user\user.respository.ts:7:23

  4 import AppError from "../../errors/AppError";
  5 
  6 export const findUserById = async (userId: string) => {
→ 7   return prisma.users.findUnique(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-08-28 20:36:54 [ERROR]: POST /room/create 
Invalid `prisma.rooms.create()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:5:29

  2 import { RoomsType } from "../../types/rooms/rooms.types";
  3 
  4 export const createRoomRepository = async (data: RoomsType) => {
→ 5   return await prisma.rooms.create(
Foreign key constraint violated on the constraint: `rooms_property_id_fkey` {"code":"P2003","meta":{"modelName":"rooms","constraint":"rooms_property_id_fkey"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-28 20:46:32 [ERROR]: GET /user/me 
Invalid `prisma.users.findUnique()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\user\user.respository.ts:7:23

  4 import AppError from "../../errors/AppError";
  5 
  6 export const findUserById = async (userId: string) => {
→ 7   return prisma.users.findUnique(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"users","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-28 20:59:14 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-28 21:00:45 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-28 21:00:47 [ERROR]: GET /property/tenant Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-28 22:04:01 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42704`. Message: `ERROR: type "double" does not exist` {"code":"P2010","meta":{"code":"42704","message":"ERROR: type \"double\" does not exist"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-28 22:07:52 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `42803`. Message: `ERROR: column "p.id" must appear in the GROUP BY clause or be used in an aggregate function` {"code":"P2010","meta":{"code":"42803","message":"ERROR: column \"p.id\" must appear in the GROUP BY clause or be used in an aggregate function"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-28 22:46:48 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-28 22:46:59 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-28 22:47:06 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-28 22:48:44 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:48:44 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:48:46 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:48:46 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:48:47 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-28 22:48:47 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:48:48 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:48:48 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:48:49 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:48:51 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:48:51 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:48:55 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:48:55 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:49:10 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:49:10 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:49:19 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:49:19 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:49:31 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:49:31 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:49:35 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:49:35 [ERROR]: GET /property/nearby latitude, longitude, and radius are required {"statusCode":400,"success":false,"message":"latitude, longitude, and radius are required"}
2025-08-28 22:49:37 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-28 22:51:38 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-28 23:14:28 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-29 17:32:07 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-29 17:32:12 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-08-29 17:32:18 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-08-29 17:32:25 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-08-29 17:32:34 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-08-29 17:33:59 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-29 17:36:22 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-29 17:41:59 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-29 20:15:00 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-29 21:27:54 [ERROR]: GET /user/me 
Invalid `prisma.users.findUnique()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\user\user.respository.ts:7:23

  4 import AppError from "../../errors/AppError";
  5 
  6 export const findUserById = async (userId: string) => {
→ 7   return prisma.users.findUnique(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"users","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 21:27:54 [ERROR]: GET /room/search 
Invalid `prisma.rooms.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:103:29

  100   propertyname: string,
  101   roomname: string
  102 ) => {
→ 103   return await prisma.rooms.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"rooms","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 21:28:00 [ERROR]: GET /room/search 
Invalid `prisma.rooms.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:103:29

  100   propertyname: string,
  101   roomname: string
  102 ) => {
→ 103   return await prisma.rooms.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"rooms","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 21:28:08 [ERROR]: GET /room/search 
Invalid `prisma.rooms.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\rooms\rooms.repository.ts:103:29

  100   propertyname: string,
  101   roomname: string
  102 ) => {
→ 103   return await prisma.rooms.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"rooms","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 21:29:57 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-29 21:32:18 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-29 23:51:55 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:51:58 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:52:29 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:52:31 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:52:34 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:52:39 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:53:39 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:53:41 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:53:44 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:53:50 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:54:27 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:56:21 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:56:26 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:56:28 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:56:31 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:56:37 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:59:06 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-29 23:59:08 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Raw query failed. Code: `22007`. Message: `ERROR: invalid input syntax for type date: "undefined"` {"code":"P2010","meta":{"code":"22007","message":"ERROR: invalid input syntax for type date: \"undefined\""},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-30 21:34:47 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-30 21:37:23 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-31 18:33:41 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 18:37:01 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 18:50:57 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 18:57:59 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 19:33:17 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 19:35:39 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 19:40:43 [ERROR]: GET /property/nearby 
Invalid `prisma.$queryRawUnsafe()` invocation:


Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-08-31 19:41:19 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 19:42:42 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 19:48:28 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 19:58:49 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 20:02:58 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 20:03:58 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 20:04:46 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 20:05:20 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 21:29:42 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 21:47:36 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 22:22:02 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 22:22:22 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 22:26:22 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 22:28:58 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 22:33:05 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 22:45:33 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 23:15:31 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 23:17:43 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-08-31 23:21:54 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 19:52:04 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 19:52:10 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-09-01 19:52:16 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-09-01 19:52:23 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"clientVersion":"6.13.0","name":"PrismaClientInitializationError"}
2025-09-01 19:53:34 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 19:54:25 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 20:02:02 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 20:08:40 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-02 12:30:03 [ERROR]: GET /reservations/get Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-02 16:55:52 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 16:57:02 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 16:57:09 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 16:57:10 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 16:57:12 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 16:57:16 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 16:57:36 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 16:57:37 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 16:57:39 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 16:57:43 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:00:02 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:00:03 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:00:05 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:00:09 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:00:37 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:00:38 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:01:07 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:01:08 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:01:10 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:01:14 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:01:30 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:01:31 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:01:35 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:01:36 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:01:38 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:01:42 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:02:03 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:02:04 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:02:06 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:02:10 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:02:26 [ERROR]: GET /reservations/get 
Invalid `prisma.bookings.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/transaction/user/user-tx.controller.ts:167:46

  164     whereClause.id = bookingId;
  165   }
  166 
→ 167 const bookings = await prisma.bookings.findMany({
        where: {
          user_id: "a44ff510-7a81-4376-b45b-a37b92280e43",
          status: "confirmed,canceled,canceled_by_tenant,expired"
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        },
        orderBy: {
          created_at: "desc"
        },
        select: {
          id: true,
          check_in_date: true,
          check_out_date: true,
          booking_rooms: {
            select: {
              id: true,
              room_id: true,
              guests_count: true,
              nights: true,
              price_per_night: true,
              subtotal: true
            }
          },
          property: {
            select: {
              name: true,
              main_image: true,
              city: true
            }
          },
          status: true
        }
      })

Invalid value for argument `status`. Expected BookingStatus. {"name":"PrismaClientValidationError","clientVersion":"6.13.0"}
2025-09-02 17:19:29 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:19:30 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:19:32 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:19:36 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:20:05 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:20:06 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:20:08 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:20:12 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:21:31 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:21:32 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:21:34 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:21:38 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:22:11 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:22:11 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:22:12 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:22:14 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:22:19 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:22:20 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:22:22 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:22:26 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:23:56 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:24:13 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:24:14 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:24:18 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:24:19 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:24:21 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:24:25 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:26:08 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:26:08 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:26:09 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:26:11 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:26:15 [ERROR]: GET /reservations/get statusList.filter is not a function {}
2025-09-02 17:32:15 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 17:32:19 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 17:32:21 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 17:32:24 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 17:32:30 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 18:02:56 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:00:53 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:04:57 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:04:59 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:05:03 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:05:08 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:15:50 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:15:53 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:15:56 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:16:02 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:16:53 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:16:56 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:16:59 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-02 20:17:04 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 03:45:38 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:00:39 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:00:42 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:00:45 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:00:50 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:04:31 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:04:39 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:04:45 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:04:47 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:04:50 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:04:55 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:07:35 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:07:37 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:07:40 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:07:45 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:08:06 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:08:08 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:08:12 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:08:17 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:08:23 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:09:41 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:10:19 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:11:08 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:11:11 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:11:15 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:11:20 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:13:08 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:13:10 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:13:14 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:13:20 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:14:44 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:14:46 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:14:49 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:14:58 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:18:26 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:18:30 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:18:32 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:18:35 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:18:40 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:19:17 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:19:19 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:19:22 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:19:27 [ERROR]: GET /reservations/get No reservations found {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:22:15 [ERROR]: GET /reservations/get | STATUS: No reservations found | MESSAGE: {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:22:17 [ERROR]: GET /reservations/get | STATUS: No reservations found | MESSAGE: {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:22:20 [ERROR]: GET /reservations/get | STATUS: No reservations found | MESSAGE: {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:22:25 [ERROR]: GET /reservations/get | STATUS: No reservations found | MESSAGE: {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:23:14 [ERROR]: GET /reservations/get | STATUS: No reservations found | MESSAGE: {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:23:16 [ERROR]: GET /reservations/get | STATUS: No reservations found | MESSAGE: {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:25:10 [ERROR]: GET /reservations/get | STATUS: No reservations found | MESSAGE: {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:25:13 [ERROR]: GET /reservations/get | STATUS: No reservations found | MESSAGE: {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:25:16 [ERROR]: GET /reservations/get | STATUS: No reservations found | MESSAGE: {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 04:25:22 [ERROR]: GET /reservations/get | STATUS: No reservations found | MESSAGE: {"statusCode":404,"success":false,"message":"No reservations found"}
2025-09-03 15:53:49 [ERROR]: GET /reservations/get | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-03 15:53:51 [ERROR]: GET /reservations/get | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-03 15:53:55 [ERROR]: GET /reservations/get | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-03 15:53:57 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-03 15:54:04 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-04 12:59:48 [ERROR]: GET /property/get/undefined | STATUS: Property not found | MESSAGE: {"statusCode":404,"success":false,"message":"Property not found"}
2025-09-04 12:59:50 [ERROR]: GET /property/get/undefined | STATUS: Property not found | MESSAGE: {"statusCode":404,"success":false,"message":"Property not found"}
2025-09-04 12:59:53 [ERROR]: GET /property/get/undefined | STATUS: Property not found | MESSAGE: {"statusCode":404,"success":false,"message":"Property not found"}
2025-09-04 12:59:58 [ERROR]: GET /property/get/undefined | STATUS: Property not found | MESSAGE: {"statusCode":404,"success":false,"message":"Property not found"}
2025-09-04 20:07:07 [ERROR]: GET /user/me | STATUS: Unauthorized | MESSAGE: {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-04 20:20:57 [ERROR]: GET /property/get/6599c906-5f13-4a30-a913-a161fc196530 | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/property/property.repository.ts:63:28

  60 };
  61 
  62 export const findPropertyByIdRepository = async (id: string) => {
→ 63   return prisma.properties.findUnique(
The table `public.properties` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"properties","table":"public.properties"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:20:57 [ERROR]: GET /pricing/quote | STATUS: 
Invalid `prisma.rooms.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/pricing/pricing.controller.ts:19:39

  16   checkOut: string;
  17 };
  18 
→ 19 const room = await prisma.rooms.findUnique(
The table `public.rooms` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"rooms","table":"public.rooms"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:20:59 [ERROR]: GET /property/get/6599c906-5f13-4a30-a913-a161fc196530 | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/property/property.repository.ts:63:28

  60 };
  61 
  62 export const findPropertyByIdRepository = async (id: string) => {
→ 63   return prisma.properties.findUnique(
The table `public.properties` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"properties","table":"public.properties"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:21:00 [ERROR]: GET /pricing/quote | STATUS: 
Invalid `prisma.rooms.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/pricing/pricing.controller.ts:19:39

  16   checkOut: string;
  17 };
  18 
→ 19 const room = await prisma.rooms.findUnique(
The table `public.rooms` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"rooms","table":"public.rooms"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:21:03 [ERROR]: GET /property/get/6599c906-5f13-4a30-a913-a161fc196530 | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/property/property.repository.ts:63:28

  60 };
  61 
  62 export const findPropertyByIdRepository = async (id: string) => {
→ 63   return prisma.properties.findUnique(
The table `public.properties` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"properties","table":"public.properties"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:21:03 [ERROR]: GET /pricing/quote | STATUS: 
Invalid `prisma.rooms.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/pricing/pricing.controller.ts:19:39

  16   checkOut: string;
  17 };
  18 
→ 19 const room = await prisma.rooms.findUnique(
The table `public.rooms` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"rooms","table":"public.rooms"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:21:08 [ERROR]: GET /property/get/6599c906-5f13-4a30-a913-a161fc196530 | STATUS: 
Invalid `prisma.properties.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/property/property.repository.ts:63:28

  60 };
  61 
  62 export const findPropertyByIdRepository = async (id: string) => {
→ 63   return prisma.properties.findUnique(
The table `public.properties` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"properties","table":"public.properties"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:21:08 [ERROR]: GET /pricing/quote | STATUS: 
Invalid `prisma.rooms.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/controllers/pricing/pricing.controller.ts:19:39

  16   checkOut: string;
  17 };
  18 
→ 19 const room = await prisma.rooms.findUnique(
The table `public.rooms` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"rooms","table":"public.rooms"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:21:45 [ERROR]: GET /user/me | STATUS: 
Invalid `prisma.users.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/user/user.respository.ts:7:23

  4 import AppError from "../../errors/AppError";
  5 
  6 export const findUserById = async (userId: string) => {
→ 7   return prisma.users.findUnique(
The table `public.users` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"users","table":"public.users"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:21:45 [ERROR]: GET /room/search | STATUS: 
Invalid `prisma.rooms.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/rooms/rooms.repository.ts:103:29

  100   propertyname: string,
  101   roomname: string
  102 ) => {
→ 103   return await prisma.rooms.findMany(
The table `public.rooms` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"rooms","table":"public.rooms"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:21:47 [ERROR]: GET /room/search | STATUS: 
Invalid `prisma.rooms.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/rooms/rooms.repository.ts:103:29

  100   propertyname: string,
  101   roomname: string
  102 ) => {
→ 103   return await prisma.rooms.findMany(
The table `public.rooms` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"rooms","table":"public.rooms"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:21:48 [ERROR]: GET /user/me | STATUS: 
Invalid `prisma.users.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/user/user.respository.ts:7:23

  4 import AppError from "../../errors/AppError";
  5 
  6 export const findUserById = async (userId: string) => {
→ 7   return prisma.users.findUnique(
The table `public.users` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"users","table":"public.users"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:22:05 [ERROR]: GET /user/me | STATUS: 
Invalid `prisma.users.findUnique()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/user/user.respository.ts:7:23

  4 import AppError from "../../errors/AppError";
  5 
  6 export const findUserById = async (userId: string) => {
→ 7   return prisma.users.findUnique(
The table `public.users` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"users","table":"public.users"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:22:05 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/property/property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
The table `public.properties` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"properties","table":"public.properties"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:22:07 [ERROR]: GET /property/all | STATUS: 
Invalid `prisma.properties.findMany()` invocation in
/Users/Farizkey/Documents/Purwadhika - JCWDOL 020 /Property-Renting-Web-App/backend/src/repositories/property/property.repository.ts:10:28

   7 }) => {
   8   const { property_category } = filters;
   9 
→ 10   return prisma.properties.findMany(
The table `public.properties` does not exist in the current database. | MESSAGE: {"code":"P2021","meta":{"modelName":"properties","table":"public.properties"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-04 20:27:18 [ERROR]: GET /property/get/6599c906-5f13-4a30-a913-a161fc196530 | STATUS: Property not found | MESSAGE: {"statusCode":404,"success":false,"message":"Property not found"}
2025-09-04 20:27:18 [ERROR]: GET /pricing/quote | STATUS: Room not found | MESSAGE: {"statusCode":404,"success":false,"message":"Room not found"}
2025-09-04 20:27:40 [ERROR]: GET /property/get/6599c906-5f13-4a30-a913-a161fc196530 | STATUS: Property not found | MESSAGE: {"statusCode":404,"success":false,"message":"Property not found"}
2025-09-04 20:27:40 [ERROR]: GET /pricing/quote | STATUS: Room not found | MESSAGE: {"statusCode":404,"success":false,"message":"Room not found"}
2025-09-04 20:27:43 [ERROR]: GET /pricing/quote | STATUS: Room not found | MESSAGE: {"statusCode":404,"success":false,"message":"Room not found"}
2025-09-04 20:27:43 [ERROR]: GET /property/get/6599c906-5f13-4a30-a913-a161fc196530 | STATUS: Property not found | MESSAGE: {"statusCode":404,"success":false,"message":"Property not found"}
2025-09-01 22:04:53 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:06:54 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:17:37 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:17:37 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:17:58 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:17:58 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:18:20 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:18:20 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:18:36 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:18:36 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:18:45 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:18:45 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:18:58 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:18:58 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:19:20 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:19:21 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:19:47 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:19:47 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:20:07 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:20:07 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:23:36 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:25:55 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:38:54 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:39:09 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:55:59 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 22:59:59 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 23:05:36 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-01 23:10:29 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-02 19:50:16 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-02 19:52:04 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-02 19:55:46 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:12:28

   9 }) => {
  10   const { property_category, min_price, max_price } = filters;
  11 
→ 12   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-02 20:02:19 [ERROR]: GET /property/all 
Invalid `prisma.properties.findMany()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:12:28

   9 }) => {
  10   const { property_category, min_price, max_price } = filters;
  11 
→ 12   return prisma.properties.findMany(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"properties","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-02 20:29:09 [ERROR]: GET /property/tenant 
Invalid `prisma.tenants.findUnique()` invocation in
D:\adi\purwhadika\FINPRO\Property Renting Web App\backend\src\repositories\property\property.repository.ts:50:25

  47 };
  48 
  49 export const getTenantWithPropertiesByUserId = async (userId: string) => {
→ 50   return prisma.tenants.findUnique(
Can't reach database server at `aws-0-us-west-1.pooler.supabase.com:6543`

Please make sure your database server is running at `aws-0-us-west-1.pooler.supabase.com:6543`. {"code":"P1001","meta":{"modelName":"tenants","database_location":"aws-0-us-west-1.pooler.supabase.com:6543"},"clientVersion":"6.13.0","name":"PrismaClientKnownRequestError"}
2025-09-02 22:42:27 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-02 22:43:50 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-02 22:53:33 [ERROR]: GET /user/me User not found {"statusCode":404,"success":false,"message":"User not found"}
2025-09-02 22:54:12 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-03 21:08:18 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-03 21:09:19 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-04 16:43:55 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-04 16:53:54 [ERROR]: GET /user/me Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-04 16:55:01 [ERROR]: POST /auth/login Invalid password {"statusCode":401,"success":false,"message":"Invalid password"}
2025-09-04 18:16:54 [ERROR]: POST /user/otp-password Unauthorized {"statusCode":401,"success":false,"message":"Unauthorized"}
2025-09-04 18:20:36 [ERROR]: PATCH /user/reset-password Cannot destructure property 'oldPassword' of 'req.body' as it is undefined. {}
2025-09-04 18:23:49 [ERROR]: PATCH /user/reset-password Invalid password {"statusCode":401,"success":false,"message":"Invalid password"}
